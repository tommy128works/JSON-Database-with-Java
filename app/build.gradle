/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
//    mainClass = 'org.example.App'
    mainClass = 'server.Main'
}

tasks.register('runServer', JavaExec) {
    group = 'application'
    description = 'Runs the main method from server.Main'
    mainClass.set('server.Main')
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runClient', JavaExec) {
    group = 'application'
    description = 'Runs the main method from client.Main'
    mainClass.set('client.Main')
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runBoth') {
    group = 'application'
    description = 'Runs the server main method then the client main method'
    dependsOn 'runServer', 'runClient'
}

tasks.named('runBoth') {
    dependsOn 'runServer', 'runClient'
    tasks.runClient.mustRunAfter tasks.runServer
}

tasks.withType(JavaExec).configureEach {
    standardInput = System.in
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
